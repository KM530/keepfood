---
description: "开发工作流、部署和维护指南"
---

# 开发工作流指南

## 开发环境搭建

### 前端环境 (food/)
```bash
# 安装依赖
cd food
npm install

# 启动开发服务器
npx expo start

# 平台特定启动
npx expo start --ios     # iOS模拟器
npx expo start --android # Android模拟器
npx expo start --web     # Web浏览器
```

### 后端环境 (foodback/)

#### Docker方式 (推荐)
```bash
# 开发环境
docker compose up flask-dev

# 生产环境
docker compose up flask-prod

# 数据库初始化
docker compose run --rm manage db init
docker compose run --rm manage db migrate
docker compose run --rm manage db upgrade
```

#### 本地方式
```bash
cd foodback
pip install -r requirements/dev.txt
npm install
npm start  # 启动webpack + flask并发服务
```

## Git工作流

### 分支策略
- `main`: 生产环境分支
- `develop`: 开发环境集成分支
- `feature/*`: 功能开发分支
- `hotfix/*`: 紧急修复分支

### 提交规范
```bash
# 格式: <type>(<scope>): <description>
git commit -m "feat(frontend): 添加食物列表页面"
git commit -m "fix(api): 修复用户登录认证问题"
git commit -m "docs: 更新API接口文档"

# 类型说明:
# feat: 新功能
# fix: 修复bug
# docs: 文档更新
# style: 代码格式调整
# refactor: 重构
# test: 测试相关
# chore: 构建/工具相关
```

## 代码质量

### 前端代码检查
```bash
cd food
npm run lint          # ESLint检查
npx expo doctor       # Expo环境检查
```

### 后端代码检查
```bash
cd foodback
flask lint            # Python代码风格检查
pytest                # 运行测试套件
```

### 代码审查清单
- [ ] 代码符合项目编码规范
- [ ] 新增功能有对应的单元测试
- [ ] API接口有适当的错误处理
- [ ] 敏感信息没有硬编码
- [ ] 数据库查询已优化
- [ ] 用户界面适配多种屏幕尺寸

## 数据库管理

### 迁移文件管理
```bash
# 创建新迁移
flask db migrate -m "添加食物表索引"

# 查看迁移历史
flask db history

# 回滚到指定版本
flask db downgrade <revision>
```

### 数据备份
```bash
# 备份数据库
pg_dump $DATABASE_URL > backup.sql

# 恢复数据库
psql $DATABASE_URL < backup.sql
```

## 测试策略

### 前端测试
- 组件单元测试 (Jest + React Native Testing Library)
- E2E测试 (Detox)
- 手动测试覆盖iOS/Android/Web三端

### 后端测试
- 单元测试 (pytest)
- API集成测试
- 数据库迁移测试

### 测试命令
```bash
# 前端测试
cd food
npm test

# 后端测试
cd foodback
pytest
pytest --cov=foodback  # 覆盖率报告
```

## 部署流程

### 前端部署

#### Expo应用发布
```bash
# 构建应用
eas build --platform all

# 发布更新 (OTA)
eas update --branch production

# 提交到应用商店
eas submit --platform all
```

#### Web部署
```bash
# 构建Web版本
npx expo export --platform web

# 部署到静态托管服务 (Vercel/Netlify)
```

### 后端部署

#### Docker部署
```dockerfile
# 生产环境配置在docker-compose.yml
FLASK_ENV=production
FLASK_DEBUG=0
```

#### 环境变量配置
```bash
# 生产环境必需变量
DATABASE_URL=postgresql://user:pass@host:port/db
SECRET_KEY=your-secret-key
SEND_FILE_MAX_AGE_DEFAULT=31536000
```

## 监控和日志

### 应用监控
- 前端: Expo Analytics / Sentry
- 后端: APM工具 (New Relic/DataDog)
- 数据库: PostgreSQL监控

### 日志管理
```python
# 后端结构化日志
import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)
```

## 性能优化

### 前端优化
- 图片懒加载和压缩
- 代码分割和按需加载
- 减少不必要的重渲染
- 使用FlatList处理长列表

### 后端优化
- 数据库查询优化
- API响应缓存
- 静态资源CDN
- 数据库连接池

## 安全考虑

### 前端安全
- API请求使用HTTPS
- 敏感数据不存储在AsyncStorage
- 用户输入验证和清理

### 后端安全
- CSRF保护
- SQL注入防护
- 文件上传安全检查
- 密码哈希存储
- JWT Token过期管理

## 故障排除

### 常见问题
1. **Metro bundler缓存问题**
   ```bash
   npx expo start --clear
   ```

2. **Flask开发服务器不响应**
   ```bash
   flask run --host=0.0.0.0 --debug
   ```

3. **数据库连接失败**
   - 检查环境变量配置
   - 确认数据库服务状态
   - 验证网络连接

### 调试工具
- React Native: Flipper
- Flask: Flask-DebugToolbar
- 数据库: pgAdmin / DBeaver
- API: Postman / Thunder Client

## 发布检查清单

### 预发布检查
- [ ] 所有测试通过
- [ ] 代码审查完成
- [ ] 数据库迁移无误
- [ ] 环境变量配置正确
- [ ] 第三方服务集成测试
- [ ] 性能测试满足要求

### 发布后监控
- [ ] 应用启动正常
- [ ] 关键功能验证
- [ ] 错误日志监控
- [ ] 用户反馈收集
- [ ] 性能指标监控

这个工作流指南确保团队成员能够按照统一的标准进行开发、测试和部署。