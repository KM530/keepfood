---
description: "前后端API集成和接口调用规范"
---

# API集成规范

## 接口文档参考
详细接口定义请查看 [接口文档.md](mdc:接口文档.md)

## 基础配置

### API基地址
- 开发环境: `http://localhost:5000/api`
- 生产环境: `https://your-domain.com/api`

### 统一响应格式
```json
{
  "code": 0,
  "body": {...},
  "message": "操作成功"
}
```

## 认证机制

### JWT Token认证
```typescript
// 前端请求头设置
const headers = {
  'Authorization': `Bearer ${token}`,
  'Content-Type': 'application/json'
};
```

```python
# 后端Token验证
from flask_login import login_required

@app.route('/api/protected')
@login_required
def protected_route():
    return {"message": "需要认证"}
```

## 核心API模块

### 1. 认证模块 (/auth)
- `POST /auth/register` - 用户注册
- `POST /auth/login` - 用户登录  
- `POST /auth/logout` - 退出登录

### 2. 用户模块 (/users)
- `GET /users/me` - 获取当前用户信息
- `PUT /users/me` - 更新用户信息 (支持multipart/form-data)

### 3. 食物模块 (/foods)
- `GET /foods` - 获取食物列表 (支持分页和排序)
- `POST /foods` - 新增食物 (multipart/form-data)
- `GET /foods/{id}` - 获取食物详情
- `PUT /foods/{id}` - 更新食物信息
- `DELETE /foods/{id}` - 删除食物
- `POST /foods/{id}/consume` - 消耗食物

### 4. 分类和位置 (/categories, /locations)
- `GET /categories` - 获取分类列表
- `POST /categories` - 新增分类
- `GET /locations` - 获取存放位置

### 5. 购物清单 (/shopping-list)
- `GET /shopping-list` - 获取购物清单
- `POST /shopping-list/items` - 添加商品
- `PATCH /shopping-list/items` - 批量更新/删除

### 6. AI功能 (/ai)
- `POST /ai/ocr-ingredients` - 配料识别
- `POST /ai/generate-recipes` - 生成菜谱

## 前端API客户端

### HTTP客户端封装
```typescript
class ApiClient {
  private baseURL = 'http://localhost:5000/api';
  private token: string | null = null;

  setToken(token: string) {
    this.token = token;
  }

  async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const headers = {
      'Content-Type': 'application/json',
      ...(this.token && { Authorization: `Bearer ${this.token}` }),
      ...options.headers,
    };

    const response = await fetch(`${this.baseURL}${endpoint}`, {
      ...options,
      headers,
    });

    const data = await response.json();
    
    if (data.code !== 0) {
      throw new Error(data.message);
    }
    
    return data.body;
  }
}
```

### 具体接口调用示例
```typescript
// 获取食物列表
const getFoods = async (page: number = 1, sortBy: string = 'expiry_date') => {
  return apiClient.request<FoodListResponse>(
    `/foods?page=${page}&sortBy=${sortBy}`
  );
};

// 上传食物图片
const addFood = async (formData: FormData) => {
  return apiClient.request<Food>('/foods', {
    method: 'POST',
    body: formData,
    headers: {}, // 不设置Content-Type，让浏览器自动设置multipart边界
  });
};
```

## 错误处理

### 统一错误处理
```typescript
// 前端错误处理
try {
  const foods = await getFoods();
} catch (error) {
  if (error.message === '登录已过期') {
    // 跳转到登录页
    router.push('/login');
  } else {
    // 显示错误提示
    showErrorToast(error.message);
  }
}
```

```python  
# 后端错误响应
@app.errorhandler(ValidationError)
def handle_validation_error(e):
    return jsonify({
        "code": 400,
        "message": str(e),
        "body": None
    }), 400
```

## 数据类型定义

### TypeScript接口定义
```typescript
interface Food {
  id: number;
  name: string;
  imageUrl: string;
  quantity: number;
  unit: string;
  expiryDate: string;
  status: 'normal' | 'expiring_soon' | 'expired';
}

interface FoodListResponse {
  items: Food[];
  total: number;
  page: number;
  limit: number;
}
```

## 开发调试

### API测试工具
- 使用 Postman 或 Thunder Client 测试接口
- 设置环境变量管理不同环境的API地址
- 保存常用请求集合

### 日志和监控
```python
# 后端API访问日志
import logging

@app.before_request
def log_request():
    app.logger.info(f'{request.method} {request.path} - {request.remote_addr}')
```

## 性能优化

### 缓存策略
- 分类和位置等静态数据客户端缓存
- API响应添加适当的缓存头
- 使用Redis缓存频繁查询数据

### 分页和延迟加载
- 长列表数据实现分页加载
- 图片资源延迟加载
- 无限滚动优化用户体验