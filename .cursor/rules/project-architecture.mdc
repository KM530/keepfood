---
alwaysApply: true
description: "项目整体架构和技术栈指导"
---

# 智能食物保鲜管家项目架构指南

## 项目概述
这是一个智能食物保鲜管家APP项目，包含前端React Native应用和后端Flask API服务。

## 技术栈

### 前端 (food/)
- **框架**: React Native + Expo SDK 53
- **路由**: expo-router (文件系统路由)
- **语言**: TypeScript
- **平台**: iOS / Android / Web
- **主要依赖**:
  - @react-navigation/* (导航)
  - expo-* (Expo模块生态)
  - react-native-reanimated (动画)

### 后端 (foodback/)
- **框架**: Flask 3.1.1 + SQLAlchemy 2.0
- **数据库**: PostgreSQL (生产) / SQLite (开发)
- **认证**: Flask-Login + Bcrypt
- **前端构建**: Webpack + Babel
- **部署**: Docker + Gunicorn
- **主要扩展**:
  - Flask-Migrate (数据库迁移)
  - Flask-WTF (表单处理)
  - Flask-Caching (缓存)

## 项目结构

### 前端目录结构
```
food/
├── app/                    # 路由页面 (expo-router)
│   ├── (tabs)/            # Tab导航页面
│   │   ├── index.tsx      # 首页 - 食物列表
│   │   └── explore.tsx    # 探索页 - 菜谱推荐
│   └── _layout.tsx        # 根布局
├── components/            # 可复用组件
│   ├── ui/               # UI基础组件
│   └── *.tsx             # 功能组件
├── constants/            # 常量定义 (颜色、配置等)
├── hooks/                # 自定义hooks
└── assets/               # 静态资源
```

### 后端目录结构
```
foodback/
├── foodback/             # 主应用包
│   ├── app.py           # Flask应用工厂
│   ├── settings.py      # 配置
│   ├── database.py      # 数据库工具
│   ├── extensions.py    # Flask扩展
│   ├── public/          # 公共蓝图 (认证等)
│   ├── user/            # 用户模块
│   └── static/          # 静态文件
├── requirements/        # 依赖管理
├── assets/             # 前端源文件 (Webpack)
└── docker-compose.yml  # Docker配置
```

## 核心概念

### 前端路由 (expo-router)
- 基于文件系统的路由
- `(tabs)` 目录表示Tab导航
- `_layout.tsx` 定义布局组件
- 支持动态路由和嵌套路由

### 后端蓝图架构
- 使用Blueprint组织路由和视图
- 每个功能模块独立的models、views、forms
- 统一的错误处理和中间件

## 开发约定

### 前端命名规范
- 组件文件使用 PascalCase
- Hook文件以 `use` 开头
- 常量文件使用 camelCase
- 类型定义使用 PascalCase

### 后端命名规范  
- 模块名使用 snake_case
- 类名使用 PascalCase
- 函数名使用 snake_case
- 常量使用 UPPER_CASE

参考文档: [需求文档.md](mdc:需求文档.md), [数据库表结构.md](mdc:数据库表结构.md), [接口文档.md](mdc:接口文档.md)