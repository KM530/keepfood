---
globs: food/**/*.tsx,food/**/*.ts
description: "React Native + Expo 前端开发规范"
---

# React Native + Expo 前端开发指南

## 项目配置
- 使用 [food/tsconfig.json](mdc:food/tsconfig.json) 的TypeScript严格模式
- 路径别名 `@/*` 指向项目根目录
- 支持iOS、Android、Web三端构建

## 核心技术栈

### 路由系统 (expo-router)
```typescript
// 文件系统路由示例
app/
├── (tabs)/
│   ├── _layout.tsx      // Tab布局
│   ├── index.tsx        // 首页 -> /
│   └── explore.tsx      // 探索页 -> /explore
└── _layout.tsx          // 根布局
```

### 主题系统
- 使用 [food/constants/Colors.ts](mdc:food/constants/Colors.ts) 定义颜色
- 支持 light/dark 主题切换
- 组件通过 `useColorScheme` hook 获取当前主题

### 组件规范
- 使用 `ThemedText` 和 `ThemedView` 替代原生组件
- 组件文件使用 PascalCase 命名
- 导出使用 default export

## 页面结构规范

### 主要页面对应需求
根据 [需求文档.md](mdc:需求文档.md)，应包含以下核心页面：

1. **首页 (index.tsx)**: 食物库存管理
   - 双列瀑布流展示
   - 食物卡片 (图片 + 名称 + 过期状态)
   - 排序功能 (过期时间/添加时间/分类)
   - 悬浮添加按钮

2. **菜谱页 (recipes.tsx)**: AI菜谱推荐
   - 临期食物筛选
   - 智能菜谱生成
   - 菜谱详情展示

3. **购物清单 (shopping.tsx)**: 购物管理
   - 清单项管理
   - 勾选状态切换
   - 批量操作

4. **个人中心 (profile.tsx)**: 用户设置
   - 用户信息管理
   - 分类管理
   - 通知设置

## 开发约定

### Import 顺序
```typescript
// 1. React/React Native
import React from 'react';
import { View, Text } from 'react-native';

// 2. 第三方库
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';

// 3. 项目内部 (使用@别名)
import { useColorScheme } from '@/hooks/useColorScheme';
import { Colors } from '@/constants/Colors';
import { ThemedView } from '@/components/ThemedView';
```

### 组件声明
```typescript
// 使用函数式组件 + TypeScript
interface Props {
  title: string;
  onPress?: () => void;
}

export default function MyComponent({ title, onPress }: Props) {
  return (
    <ThemedView>
      <ThemedText>{title}</ThemedText>
    </ThemedView>
  );
}
```

### 样式规范
- 使用 StyleSheet.create 创建样式
- 优先使用 Flexbox 布局
- 响应式设计考虑不同屏幕尺寸

## API 集成
根据 [接口文档.md](mdc:接口文档.md) 集成后端接口：
- 使用统一的API客户端
- 实现JWT认证
- 错误处理和加载状态管理

## 性能优化
- 图片使用 expo-image 组件
- 列表使用 FlatList 或 VirtualizedList
- 避免不必要的重渲染
- 合理使用 React.memo 和 useMemo